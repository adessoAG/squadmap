plugins {
	id 'org.springframework.boot' version '2.2.0.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
	id 'jacoco'
	id "org.sonarqube" version "2.7.1"
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	compile  'org.neo4j:neo4j'
	runtimeOnly project(':squadmap-frontend')
	implementation 'org.neo4j:neo4j-ogm-test:3.2.0-alpha02'
	implementation 'org.neo4j:neo4j-ogm-embedded-driver'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-neo4j'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
	jvmArgs "-Dspring.test.context.cache.maxSize=1 -XX:+UseSerialGC -Xss512k -XX:MaxRAM=72m --no-daemon"
}

sonarqube {
	properties {
		property "sonar.projectKey", "adessoAG_squadmap"
		property "sonar.organization", "adesso-ag"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.login", "${System.env.SONAR_TOKEN}"
		property "sonar.sourceEncoding", "UTF-8"

		if (System.env.CIRCLE_PULL_REQUEST != null && System.env.CIRCLE_PULL_REQUEST != "") {
			println "Analyzing branch '${System.env.CIRCLE_BRANCH}' for PR #${System.env.CIRCLE_PULL_REQUEST}"
			property "sonar.pullrequest.provider", "GitHub"
			property "sonar.pullrequest.github.repository", "adessoAG/squadmap"
			property "sonar.pullrequest.branch", "${System.env.CIRCLE_BRANCH}"
			property "sonar.pullrequest.key", "${System.env.CIRCLE_PULL_REQUEST}"
		} else if (!"master".equals(System.env.CIRCLE_BRANCH)) {
			println "Analyzing branch '${System.env.CIRCLE_BRANCH}' without PR"
			property "sonar.branch.name", "${System.env.CIRCLE_BRANCH}"
		}
	}
}

jacocoTestReport {
	reports {
		xml.enabled true
	}
}

plugins.withType(JacocoPlugin) {
	tasks["test"].finalizedBy 'jacocoTestReport'
}
