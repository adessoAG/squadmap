plugins {
    id "org.sonarqube" version "2.7.1"
    id "java"
    id "com.moowork.node" version '1.3.1'
}

defaultTasks 'build'
wrapper {
    description "Regenerates the Gradle Wrapper files"
    gradleVersion = '5.0'
    distributionUrl = "http://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.projectKey", "adessoAG_squadmap"
        property "sonar.organization", "adesso-ag"
        property "sonar.login", "${System.env.SONAR_TOKEN}"
        property "sonar.host.url", "https://sonarcloud.io"
        if (System.env.CIRCLE_PULL_REQUEST != null && System.env.CIRCLE_PULL_REQUEST != "") {
            println "Analyzing branch '${System.env.CIRCLE_BRANCH}' for PR #${System.env.CIRCLE_PULL_REQUEST}"
            property "sonar.pullrequest.provider", "GitHub"
            property "sonar.pullrequest.github.repository", "adessoAG/squadmap"
            property "sonar.pullrequest.branch", "${System.env.CIRCLE_BRANCH}"
            property "sonar.pullrequest.key", "${System.env.CIRCLE_PULL_REQUEST}"
        } else if (!"master".equals(System.env.CIRCLE_BRANCH)) {
            println "Analyzing branch '${System.env.CIRCLE_BRANCH}' without PR"
            property "sonar.branch.name", "${System.env.CIRCLE_BRANCH}"
        }
    }
}

project(":squadmap-backend") {
    sonarqube {
        properties {
            property "sonar.module", "squadmap-backend"
        }
    }
}

project(":squadmap-frontend") {
    sonarqube {
        properties {
            property "sonar.module", "squadmap-frontend"
            property "sonar.sources", "src"
            property "sonar.exclusions", ["**/node_modules/**", "**/*.spec.ts"]
            property "sonar.tests", "src"
            property "sonar.test.inclusions", "**/*.spec.ts"
            property "sonar.nodejs.executable", node.variant.nodeExec
            property "sonar.typescript.lcov.reportPaths", "coverage/squadmap-frontend/lcov.info"
        }
    }
}
